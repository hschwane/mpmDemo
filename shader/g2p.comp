#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "kernel.glsl"

// --------------------------------------
// uniforms
uniform int numParticles;
uniform vec2 simDomain;
uniform float timestep;
uniform float pMass;
uniform float gridCellSize=1;
uniform float apicFactor=4.0f;

// --------------------------------------
// texture bindings
uniform layout(r32f) restrict image2D gridVX;
uniform layout(r32f) restrict image2D gridVY;
uniform layout(r32f) restrict image2D gridM;

// --------------------------------------
// buffer bindings
layout(binding=2,std430) buffer ParticlePosition { vec2 particlePosition[]; };
layout(binding=3,std430) buffer ParticleVelocity { vec2 particleVelocity[]; };
layout(binding=4,std430) buffer ParticleF { mat2 particleF[]; };
layout(binding=5,std430) buffer ParticleAffine { mat2 particleAffine[]; };
layout(binding=6,std430) buffer ParticleVolume { float particleVolume[]; };

// --------------------------------------
// compute parameters
layout(local_size_variable) in;

void main()
{
    int problemSize = numParticles;
    for(  int id = int(gl_GlobalInvocationID.x); id < problemSize; id += int(gl_NumWorkGroups.x * gl_LocalGroupSizeARB.x))
    {
        vec2 pPos = particlePosition[id];
        vec2 pVel = vec2(0);
        mat2 pAffine = mat2(0);

        ivec2 cellId = ivec2(pPos);
        vec2 cellDiff = (pPos - cellId) -0.5;

        vec2 weight[3];
        weight[0] = 0.5f * vec2( (0.5f-cellDiff.x)*(0.5f-cellDiff.x), (0.5f-cellDiff.y)*(0.5f-cellDiff.y));
        weight[1] = 0.75f * vec2( cellDiff.x*cellDiff.x, cellDiff.y*cellDiff.y);
        weight[2] = 0.5f * vec2( (0.5f + cellDiff.x)*(0.5f + cellDiff.x), (0.5f + cellDiff.y)*(0.5f + cellDiff.y));

        for( int gx = 0; gx < 3; gx++)
            for( int gy = 0; gy < 3; gy++)
            {
                float wip = weight[gx].x * weight[gy].y;

                ivec2  cellIndex = ivec2(cellId.x + gx-1, cellId.y +gy-1);
                vec2 xdiff = (cellIndex - pPos) + 0.5;

                vec2 gridVel;
                gridVel.x = imageLoad(gridVX,cellIndex).x;
                gridVel.y = imageLoad(gridVY,cellIndex).x;

                pVel += wip * gridVel;
                pAffine += wip * mat2( gridVel.x * xdiff.x, gridVel.x * xdiff.y,
                                        gridVel.y * xdiff.x, gridVel.y * xdiff.y);
            }

        pAffine *= apicFactor;

        // update position
        pPos += timestep * pVel;

        // update F
//        mat2 pF = (mat2(1.0f) + timestep * apicFactor * affine) * particleF[id];

        // clamp to simulation domain for safety
        pPos = clamp(pPos, vec2(2,2), simDomain-vec2(3,3));

        // store updated values
        particlePosition[id] = pPos;
        particleVelocity[id] = pVel;
        particleAffine[id] = pAffine;
//        particleF[id] = pF;
    }
}
